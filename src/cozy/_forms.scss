// XXX overwrittent to avoid the .was-validated stuff
@mixin form-validation-state-selector($state) {
  @if ($state == "valid" or $state == "invalid") {
    #{if(&, "&", "")}.is-#{$state} {
      @content;
    }
  } @else {
    #{if(&, "&", "")}.is-#{$state} {
      @content;
    }
  }
}

.form-check-input,
.form-check-label {
  cursor: pointer;
}

.form-check-input:hover {
  box-shadow: 0 0 0 .5rem var(--btn-primary-shadow-color);
}

.form-control:hover {
  border-color: var(--primaryColor);
}

// XXX we want to make the check able to use a color from the theme, via the
// CSS variables. Bootstrap uses a background image with a SVG but I didn't
// find how to use a CSS variable for that (url() escapes custom properties).
// So, I decided to use a mask with the SVG. But the mask on the input hides
// the border and the outline on hover. We can use an ::after pseudo element
// and apply the mask on it. The input is a replaced element, so it can't have
// an ::after pseudo element, but we can put it on the nearby label. Yikes!
.form-check-input[type="checkbox"] ~ label {
  position: relative;
}

.form-check-input[type="checkbox"]:checked ~ label::after {
  position: absolute;
  top: 0.175em;
  left: $form-check-padding-start * -1;
  display: block;
  mask: escape-svg(url("data:image/svg+xml,<svg xmlns='http://www.w3.org/2000/svg' viewBox='0 0 16 16'><path fill-rule='evenodd' clip-rule='evenodd' d='M2.29 8.29C2.68 7.9 3.32 7.9 3.7 8.29L6 10.59L13.29 3.29C13.68 2.9 14.31 2.9 14.7 3.29C15.1 3.68 15.1 4.32 14.71 4.71L6.71 12.71C6.31 13.1 5.68 13.1 5.29 12.7L2.29 9.71C1.9 9.32 1.9 8.68 2.29 8.29Z' fill='#000'/></svg>"));
  mask-size: cover;
  width: $form-check-input-width;
  height: $form-check-input-width;
  content: "";
  background-color: var(--primaryTextContrastColor);
}

.form-check-input:disabled {
  background-color: var(--btn-secondary-hover-color);
}

